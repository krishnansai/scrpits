image: node:18-alpine

stages:
  - build-test
  - push-registry
  - deploy

variables:
  CI_AWS_DEV_ECS_CLUSTER: 'dev-atlus'
  CI_AWS_DEV_ECS_SERVICE: 'ATLUS-ADMIN-UI'
  CI_AWS_DEV_ECS_TASK_DEFINITION: 'ATLUS-ADMIN-UI'
  CI_AWS_DEV_ECS_REGION: 'eu-central-1'
  CI_AWS_TEST_ECS_CLUSTER: 'test-atlus'
  CI_AWS_TEST_ECS_SERVICE: 'TEST-ATLUS-ADMIN-UI'
  CI_AWS_TEST_ECS_TASK_DEFINITION: 'TEST-ATLUS-ADMIN-UI'
  CI_AWS_TEST_ECS_REGION: 'eu-central-1'
  CI_AWS_PROD_ECS_CLUSTER: 'prod-atlus'
  CI_AWS_PROD_ECS_SERVICE: 'PROD-ATLUS-ADMIN-UI'
  CI_AWS_PROD_ECS_TASK_DEFINITION: 'PROD-ATLUS-ADMIN-UI-TASK'
  CI_AWS_PROD_ECS_REGION: 'eu-west-2'

.aws-setup: &aws-setup
  - apk add --no-cache aws-cli jq
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  - aws configure set region $AWS_DEFAULT_REGION
  - eval $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

.docker-push-development: &docker-push-development
  - docker build -t $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_DEV} --build-arg NPM_HID_TOKEN=$NPM_HID_TOKEN --build-arg DEPLOY_ENV=development --build-arg NGINX_HEADER_FRAME_ENV_DOMAIN=$NGINX_HEADER_FRAME_ENV_DOMAIN .
  - docker push $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_DEV}

.docker-push-testing: &docker-push-testing
  - docker build -t $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_TESTING} --build-arg NPM_HID_TOKEN=$NPM_HID_TOKEN --build-arg DEPLOY_ENV=testing --build-arg NGINX_HEADER_FRAME_ENV_DOMAIN=$NGINX_HEADER_FRAME_ENV_DOMAIN .
  - docker push $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_TESTING}

.docker-push-green: &docker-push-green
  - docker build -t $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_GREEN} --build-arg NPM_HID_TOKEN=$NPM_HID_TOKEN --build-arg DEPLOY_ENV=green --build-arg NGINX_HEADER_FRAME_ENV_DOMAIN=$NGINX_HEADER_FRAME_ENV_DOMAIN .
  - docker push $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_GREEN}

.docker-push-production: &docker-push-production
  - docker build -t $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_PRODUCTION} --build-arg NPM_HID_TOKEN=$NPM_HID_TOKEN --build-arg DEPLOY_ENV=production --build-arg NGINX_HEADER_FRAME_ENV_DOMAIN=$NGINX_HEADER_FRAME_ENV_DOMAIN .
  - docker push $AWS_ECR_REGISTRY/atlus/admin-ui:${IMAGE_TAG_PRODUCTION}

.aws-deploy-task: &aws-deploy-task
  - |
    echo `aws ecs describe-task-definition --task-definition $CI_AWS_ECS_TASK_DEFINITION --region $CI_AWS_ECS_REGION` > input.json
    echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="'$AWS_ECR_REGISTRY/atlus/admin-ui':'$IMAGE_TAG'"') > input.json
    echo $(cat input.json | jq '.taskDefinition') > input.json
    echo $(cat input.json | jq 'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities)') > input.json
    aws ecs register-task-definition --cli-input-json file://input.json --region $CI_AWS_ECS_REGION
    revision=$(aws ecs describe-task-definition --task-definition $CI_AWS_ECS_TASK_DEFINITION --region $CI_AWS_ECS_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
    aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --task-definition $CI_AWS_ECS_TASK_DEFINITION:$revision --region $CI_AWS_ECS_REGION


build-test:
  stage: build-test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: always
  script:
    - npm config set //registry.npmjs.org/:_authToken ${NPM_HID_TOKEN}
    - unset CI
    - npm install
    - npm run build
    - npm run test:ci

    - export IMAGE_TAG=$(node -p "require('./package.json').version")
    - echo 'image_tag from' $CI_COMMIT_BRANCH' =' $IMAGE_TAG
    - echo $IMAGE_TAG >> image_tag.txt
  artifacts:
    when: always
    expire_in: 1day
    paths:
      - image_tag.txt
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

push-registry:development:
  stage: push-registry
  needs: ['build-test']
  image: docker:stable
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_BRANCH == 'development'
      when: on_success
    - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'testing' || $CI_COMMIT_BRANCH == 'production'
      when: never
  variables:
    NPM_HID_TOKEN: $NPM_HID_TOKEN
    NGINX_HEADER_FRAME_ENV_DOMAIN: https://admin-native.atlus.acuity-cloud.com
  before_script:
    - IMAGE_TAG=$(cat image_tag.txt)
    - export IMAGE_TAG_DEV=${IMAGE_TAG}_dev
    - echo $IMAGE_TAG_DEV >> image_tag_dev.txt
    - *aws-setup
  script:
    - *docker-push-development
  artifacts:
    name: artifacts-build-dev
    expire_in: 3 mins
    paths:
      - image_tag_dev.txt


push-registry:testing:
  stage: push-registry
  needs: ['build-test']
  image: docker:stable
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_BRANCH == 'testing'
      when: on_success
    - if: $CI_COMMIT_BRANCH == 'development' || $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'production'
      when: never
  variables:
    NPM_HID_TOKEN: $NPM_HID_TOKEN
    NGINX_HEADER_FRAME_ENV_DOMAIN: https://sfuoaqstnl.execute-api.eu-central-1.amazonaws.com
  before_script:
    - IMAGE_TAG=$(cat image_tag.txt)
    - export IMAGE_TAG_TESTING=${IMAGE_TAG}_testing
    - echo $IMAGE_TAG_TESTING >> image_tag_testing.txt
    - *aws-setup
  script:
    - *docker-push-testing
  artifacts:
    name: artifacts-build-testing
    expire_in: 3 mins
    paths:
      - image_tag_testing.txt

push-registry:green:
  stage: push-registry
  needs: ['build-test']
  image: docker:stable
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_BRANCH == 'production'
      when: on_success
    - if: $CI_COMMIT_BRANCH == 'development' || $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'testing'
      when: never
  variables:
    NPM_HID_TOKEN: $NPM_HID_TOKEN
    NGINX_HEADER_FRAME_ENV_DOMAIN: https://internal-prod-elb-atlus-2006965462.eu-west-2.elb.amazonaws.com
  before_script:
    - IMAGE_TAG=$(cat image_tag.txt)
    - export IMAGE_TAG_GREEN=${IMAGE_TAG}_green
    - echo $IMAGE_TAG_GREEN >> image_tag_green.txt
    - *aws-setup
  script:
    - *docker-push-green
  artifacts:
    name: artifacts-build-green
    expire_in: 3 mins
    paths:
      - image_tag_green.txt

push-registry:production:
  stage: push-registry
  needs: ['build-test']
  image: docker:stable
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_BRANCH == 'production'
      when: on_success
    - if: $CI_COMMIT_BRANCH == 'development' || $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'testing'
      when: never
  variables:
    NPM_HID_TOKEN: $NPM_HID_TOKEN
    NGINX_HEADER_FRAME_ENV_DOMAIN: https://admin.atlus.invotech-cloud.com
  before_script:
    - IMAGE_TAG=$(cat image_tag.txt)
    - export IMAGE_TAG_PRODUCTION=${IMAGE_TAG}_production
    - echo $IMAGE_TAG_PRODUCTION >> image_tag_production.txt
    - *aws-setup
  script:
    - *docker-push-production
  artifacts:
    name: artifacts-build-production
    expire_in: 3 mins
    paths:
      - image_tag_production.txt

deploy:development:
  stage: deploy
  image: docker:stable
  needs: ['push-registry:development']
  environment: development
  variables:
    CI_AWS_ECS_TASK_DEFINITION: $CI_AWS_DEV_ECS_TASK_DEFINITION
    CI_AWS_ECS_CLUSTER: $CI_AWS_DEV_ECS_CLUSTER
    CI_AWS_ECS_SERVICE: $CI_AWS_DEV_ECS_SERVICE
    CI_AWS_ECS_REGION: $CI_AWS_DEV_ECS_REGION
  rules:
    - if: $CI_COMMIT_BRANCH == 'development'
      when: manual
  before_script:
    - IMAGE_TAG=$(cat image_tag_dev.txt)
    - *aws-setup
  script:
    - *aws-deploy-task


deploy:testing:
  stage: deploy
  image: docker:stable
  needs: ['push-registry:testing']
  environment: testing
  variables:
    CI_AWS_ECS_TASK_DEFINITION: $CI_AWS_TEST_ECS_TASK_DEFINITION
    CI_AWS_ECS_CLUSTER: $CI_AWS_TEST_ECS_CLUSTER
    CI_AWS_ECS_SERVICE: $CI_AWS_TEST_ECS_SERVICE
    CI_AWS_ECS_REGION: $CI_AWS_TEST_ECS_REGION
  rules:
    - if: $CI_COMMIT_BRANCH == 'testing'
      when: manual
  before_script:
    - IMAGE_TAG=$(cat image_tag_testing.txt)
    - *aws-setup
  script:
    - *aws-deploy-task

deploy:production:
  stage: deploy
  image: docker:stable
  needs: ['push-registry:production']
  environment: testing
  variables:
    CI_AWS_ECS_TASK_DEFINITION: $CI_AWS_PROD_ECS_TASK_DEFINITION
    CI_AWS_ECS_CLUSTER: $CI_AWS_PROD_ECS_CLUSTER
    CI_AWS_ECS_SERVICE: $CI_AWS_PROD_ECS_SERVICE
    CI_AWS_ECS_REGION: $CI_AWS_PROD_ECS_REGION
  rules:
    - if: $CI_COMMIT_BRANCH == 'production'
      when: manual
  before_script:
    - IMAGE_TAG=$(cat image_tag_production.txt)
    - *aws-setup
  script:
    - *aws-deploy-task
